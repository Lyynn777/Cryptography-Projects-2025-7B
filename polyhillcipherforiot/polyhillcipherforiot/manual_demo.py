#!/usr/bin/env python3
"""
Manual Step-by-Step Demonstration
Perfect for explaining to students with hand calculations
"""

print("üéì POLY-HILL CIPHER: STEP-BY-STEP MANUAL DEMONSTRATION")
print("=" * 60)
print("Perfect for teaching students the algorithm!")
print()

print("üìù EXAMPLE: Encrypt 'HI'")
print("-" * 30)
print("Given:")
print("  ‚Ä¢ Polynomial: P(x) = 1 + 2x")  
print("  ‚Ä¢ Hill Matrix: [[3, 2], [1, 1]]")
print("  ‚Ä¢ Modulus: 26")
print()

print("STEP 1: Convert letters to numbers")
print("  H = 7, I = 8")
print("  Block: [7, 8]")
print()

print("STEP 2: Apply polynomial P(x) = 1 + 2x")
print("  P(7) = 1 + 2√ó7 = 15")
print("  P(8) = 1 + 2√ó8 = 17") 
print("  After polynomial: [15, 17]")
print()

print("STEP 3: Apply Hill matrix")
print("  [3 2] √ó [15] = [3√ó15 + 2√ó17] = [45 + 34] = [79]")
print("  [1 1]   [17]   [1√ó15 + 1√ó17]   [15 + 17]   [32]")
print("  Mod 26: [79 mod 26, 32 mod 26] = [1, 6]")
print()

print("STEP 4: Position obfuscation (XOR)")
print("  1 ‚äï 0 = 1 (first position)")
print("  6 ‚äï 1 = 7 (second position)") 
print("  After obfuscation: [1, 7]")
print()

print("STEP 5: Convert back to letters")
print("  1 ‚Üí B, 7 ‚Üí H")
print("  Result: 'HI' ‚Üí 'BH'")
print()

print("‚úÖ FINAL RESULT: 'HI' encrypts to 'BH'")
print()

print("üéØ KEY TEACHING POINTS:")
print("‚Ä¢ Each step transforms the data mathematically")
print("‚Ä¢ Polynomial adds confusion (scrambles meaning)")
print("‚Ä¢ Matrix adds diffusion (spreads changes)")
print("‚Ä¢ XOR adds position-dependent randomness") 
print("‚Ä¢ Perfect for IoT: fast, lightweight, secure")
print()

print("üí° STUDENT EXERCISE:")
print("Try encrypting 'GO' using the same steps!")
print("G=6, O=14 ‚Üí P(6)=13, P(14)=29‚â°3 ‚Üí Matrix math ‚Üí Result")

print("\n" + "=" * 60)
print("üéâ Use this manual example to explain the algorithm!")
print("Students can follow along with pencil and paper!")